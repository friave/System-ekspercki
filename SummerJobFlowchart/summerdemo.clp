(deffacts MAIN::knowledge-base
   (welcome (message WelcomeMessage))
   (goal (variable type.job))
   (legalanswers (values yes no))
   (displayanswers (values "Yes" "No"))
   
   (rule (if money is yes)
		(then make.money is need))
   (rule (if money is no)
		(then make.money is not.need))
	(question (variable money)
			(query money.query))
			
   (rule (if make.money is not.need and have.money is yes)
		(then owned.money is enough))
   (rule (if make.money is not.need and have.money is no)
		(then owned.money is not.enough))
	(question (variable have.money)
			(query have.money.query))
			
   (rule (if owned.money is enough and hamilton is yes)
		(then if.hamilton is stay))
   (rule (if owned.money is enough and hamilton is no)
		(then type.job is traveler))
	(question (variable hamilton)
			(query hamilton.query))	
			
   (rule (if if.hamilton is stay and brain is yes)
		(then type.job is student))
   (rule (if if.hamilton is stay and brain is no)
		(then type.job is potato))
	(question (variable brain)
			(query brain.query))	
			
   (rule (if owned.money is not.enough and artistic.talent is yes)
		(then type.job is musician))
   (rule (if owned.money is not.enough and artistic.talent is no)
		(then type.job is intern))
	(question (variable artistic.talent)
			(query artistic.talent.query))	
			
   (rule (if make.money is need and brain is yes)
		(then having.brain is usefull))
   (rule (if make.money is need and brain is no)
		(then having.brain is not.usefull))
	(question (variable brain)
			(query brain.query))
			
   (rule (if make.money is need and having.brain is not.usefull and outside is yes)
		(then if.outside is wanted))
   (rule (if make.money is need and having.brain is not.usefull and outside is no)
		(then if.outside is not.wanted))
	(question (variable outside)
			(query outside.query))
			
   (rule (if having.brain is usefull and office is yes)
		(then if.office is wanted))
   (rule (if having.brain is usefull and office is no)
		(then if.office is not.wanted))
	(question (variable office)
			(query office.query))
			
   (rule (if if.office is wanted and mcmaster is yes)
		(then if.mcmaster is wanted))
   (rule (if if.office is wanted and mcmaster is no)
		(then if.mcmaster is not.wanted))
	(question (variable mcmaster)
			(query mcmaster.query))
			
   (rule (if if.mcmaster is wanted and science is yes)
		(then type.job is research.assistant))
   (rule (if if.mcmaster is wanted and science is no)
		(then type.job is mcmaster.assistant))
	(question (variable science)
			(query science.query))
			
   (rule (if if.mcmaster is not.wanted and computers is yes)
		(then if.computers is decent))
   (rule (if if.mcmaster is not.wanted and computers is no)
		(then type.job is servant))
	(question (variable computers)
			(query computers.query))
			
   (rule (if if.computers is decent and coding is yes)
		(then type.job is developer))
   (rule (if if.computers is decent and coding is no)
		(then type.job is admin.assistant))
	(question (variable coding)
			(query coding.query))
			
   (rule (if if.office is not.wanted and boss is yes)
		(then if.boss is you))
   (rule (if if.office is not.wanted and boss is no)
		(then if.boss is not.you))
	(question (variable boss)
			(query boss.query))
			
   (rule (if if.boss is you and academics is yes)
		(then if.academics is good))
   (rule (if if.boss is you and academics is no)
		(then if.academics is not.good))
	(question (variable academics)
			(query academics.query))
			
   (rule (if if.academics is good and teaching is yes)
		(then type.job is tutor))
   (rule (if if.academics is good and teaching is no)
		(then type.job is usra))
	(question (variable teaching)
			(query teaching.query))
			
   (rule (if if.academics is not.good and artistic is yes)
		(then type.job is performer))
   (rule (if if.academics is not.good and artistic is no)
		(then type.job is business.owner))
	(question (variable artistic)
			(query artistic.query))
			
   (rule (if if.boss is not.you and outside is yes)
		(then type.job is camp.leader))
   (rule (if if.boss is not.you and outside is no)
		(then type.job is museum))
	(question (variable outside)
			(query outside.query))
			
   (rule (if if.outside is wanted and physical is yes)
		(then if.physical is okay))
   (rule (if if.outside is wanted and physical is no)
		(then if.physical is not.okay))
	(question (variable physical)
			(query physical.query))
			
   (rule (if if.physical is not.okay and camping is yes)
		(then type.job is park))
   (rule (if if.physical is not.okay and camping is no)
		(then type.job is fruit))
	(question (variable camping)
			(query camping.query))
			
   (rule (if if.physical is okay and showering is yes)
		(then type.job is tree))
   (rule (if if.physical is okay and showering is no)
		(then if.showering is not.okay))
	(question (variable showering)
			(query showering.query))
			
   (rule (if if.showering is not.okay and animals is yes)
		(then type.job is farm))
   (rule (if if.showering is not.okay and animals is no)
		(then type.job is landscaper))
	(question (variable animals)
			(query animals.query))		
			
   (rule (if if.outside is not.wanted and food is yes)
		(then if.food is wanted))
   (rule (if if.outside is not.wanted and food is no)
		(then if.food is not.wanted))
	(question (variable food)
			(query food.query))	
			
   (rule (if if.food is wanted and people is yes)
		(then if.people is good))
   (rule (if if.food is wanted and people is no)
		(then if.people is not.good))
	(question (variable people)
			(query people.query))	
			
   (rule (if if.people is good and manhattan is yes)
		(then type.job is bartender))
   (rule (if if.people is good and manhattan is no)
		(then type.job is barrista))
	(question (variable manhattan)
			(query manhattan.query))	
			
   (rule (if if.people is not.good and greasy is yes)
		(then type.job is grocery))
   (rule (if if.people is not.good and greasy is no)
		(then if.greasy is not.good))
	(question (variable greasy)
			(query greasy.query))	
			
   (rule (if if.greasy is not.good and burgers is yes)
		(then type.job is fastfood))
   (rule (if if.greasy is not.good and burgers is no)
		(then type.job is dishwasher))
	(question (variable burgers)
			(query burgers.query))	
			
   (rule (if if.food is not.wanted and ruling is yes)
		(then if.ruling is good))
   (rule (if if.food is not.wanted and ruling is no)
		(then if.ruling is not.good))
	(question (variable ruling)
			(query ruling.query))	
			
   (rule (if if.ruling is good and bulky is yes)
		(then type.job is security))
   (rule (if if.ruling is good and bulky is no)
		(then if.bulky is not.bulky))
	(question (variable bulky)
			(query bulky.query))	
			
   (rule (if if.bulky is not.bulky and swim is yes)
		(then type.job is lifeguard))
   (rule (if if.bulky is not.bulky and swim is no)
		(then type.job is sport))
	(question (variable swim)
			(query swim.query))	
			
   (rule (if if.ruling is not.good and travel is yes)
		(then type.job is brand.promoter))
   (rule (if if.ruling is not.good and travel is no)
		(then if.travel is not.good))
	(question (variable travel)
			(query travel.query))	
			
   (rule (if if.travel is not.good and needle.phobia is yes)
		(then type.job is clerk))
   (rule (if if.travel is not.good and needle.phobia is no)
		(then type.job is medical.tester))
	(question (variable needle.phobia)
			(query needle.phobia.query))	
			
   (answer (prefix "You should be ") (variable type.job) (postfix "."))) 		
			